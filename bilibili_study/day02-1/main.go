package main

import "fmt"

// 二进制转换为十进制的方法
// 要从右到左用二进制的每个数去乘以2的相应次方,小数点后则是从左往右
// eg:
// 101001 => 41
// 1 * 2 ^ 0 + 0 * 2 * 1 + 0 * 2 ^ 2 + 1 * 2 ^ 3 + 0 * 2 ^ 4 + 1 * 2 ^ 5 = 1 + 0 + 0 + 8 + 0 + 32 = 41

// 十进制转换为二进制
// 十进制整数转换为二进制整数采用"除2取余，逆序排列"法
// 41
// 41 / 2 = 20 . 1
// 20 / 2 = 10 . 0
// 10 / 2 = 5  . 0
// 5  / 2 = 2  . 1
// 2  / 2 = 1  . 0
// 1  / 2 = 0  . 1
// 101001

func main() {
	// 位运算符
	// 位运算符对整数在内存中的二进制位进行操作。
	// & 参与运算的两数各对应的二进位相与。（两位均为1才为1）
	a := 1 // 二进制 => 001 => 为了对齐前面两位补了 0
	b := 5 // 二进制 => 101
	//				   001 => 对应位置相与  都为 1 才为 1
	fmt.Println(a & b)
	// 43
	// 43 / 2 = 21 . 1
	// 21 / 2 = 10 . 1
	// 10 / 2 = 5  . 0
	// 5  / 2 = 2  . 1
	// 2  / 2 = 1  . 0
	// 1  / 2 = 0  . 1
	c := 41 // 101001
	d := 43 // 101011
	//         101001
	fmt.Println( c & d)
	fmt.Printf("%b\n", c & d)
	// 参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）
	// 101011
	fmt.Println(c | d)
	fmt.Printf("%b\n", c | d)
	// 与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）
	// 000010
	fmt.Println(c ^ d)
	fmt.Printf("%b\n", c ^ d)
	// 左移n位就是乘以2的n次方。 “a<<b”是把a的各二进位全部左移b位，高位丢弃，低位补0。
	fmt.Println("2 << 3 是", 2 << 3)   // 10    左移 3 位 => 10000 => 0 + 0 + 0 + 0 + 1 * 2 ^ 4 = 16
	fmt.Println("16 >> 3 是", 16 >> 3) // 10000 右移 3 位 => 10    => 2
}
